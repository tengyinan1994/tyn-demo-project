{
  "author" : "by",
  "version" : "1.2.6",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "ByGenerate",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int(11) unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint(1) unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int(4) unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "double",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "tinyint unsigned",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int(255) unsigned",
        "javaType" : "java.lang.Integer"
      } ]
    }
  },
  "template" : {
    "ByGenerate" : {
      "name" : "ByGenerate",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.common.PageResultBean;\nimport $!{tableInfo.savePackageName}.common.validconfig.Insert;\nimport $!{tableInfo.savePackageName}.common.validconfig.Update;\nimport $!{tableInfo.savePackageName}.common.validconfig.Delete;\nimport $!{tableInfo.savePackageName}.entity.request.$!{tableInfo.name}Req;\nimport $!{tableInfo.savePackageName}.entity.response.$!{tableInfo.name}Res;\nimport $!{tableInfo.savePackageName}.common.ResultBean;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}Req 请求实体类\n     * @return 查询结果\n     */\n    @PostMapping(\"/$!tool.firstLowerCase($tableInfo.name)/list\")\n    public PageResultBean<$!{tableInfo.name}Res> queryByPage(@RequestBody $!{tableInfo.name}Req $!{tool.firstLowerCase($tableInfo.name)}Req) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage($!{tool.firstLowerCase($tableInfo.name)}Req);\n    }\n\n    /**\n     * 通过主键查询单条数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体类\n     * @return 单条数据\n     */\n    @PostMapping(\"/$!tool.firstLowerCase($tableInfo.name)/query_by_id\")\n    public ResultBean<$!{tableInfo.name}> queryById(@RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.queryById($!{tool.firstLowerCase($tableInfo.name)}.getKey());\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体类\n     * @return 新增结果\n     */\n    @PostMapping(\"/$!tool.firstLowerCase($tableInfo.name)/add\")\n    public ResultBean<$!{tableInfo.name}> add(@Validated({Insert.class}) @RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)});\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体类\n     * @return 编辑结果\n     */\n    @PostMapping(\"/$!tool.firstLowerCase($tableInfo.name)/edit\")\n    public ResultBean<$!{tableInfo.name}> edit(@Validated({Update.class}) @RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)});\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体类\n     * @return 删除是否成功\n     */\n    @PostMapping(\"/$!tool.firstLowerCase($tableInfo.name)/del\")\n    public ResultBean<$!{tableInfo.name}> deleteById(@Validated({Delete.class})@RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.deleteById($!{tool.firstLowerCase($tableInfo.name)}.getKey());\n    }\n\n}\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\nimport org.hibernate.validator.constraints.Length;\nimport $!{tableInfo.savePackageName}.common.validconfig.Insert;\nimport $!{tableInfo.savePackageName}.common.validconfig.Update;\nimport $!{tableInfo.savePackageName}.common.validconfig.Delete;\n\n##表注释（宏定义）\n#tableComment(\"表实体类\")\n@Data\n@SuppressWarnings(\"serial\")\n@EqualsAndHashCode(callSuper = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n#if($tableInfo.pkColumn[0].name==$!{column.name})\n    @TableId\n    @JsonSerialize(using = ToStringSerializer.class)\n    @NotNull(groups ={Update.class, Delete.class},message = \"请输入主键\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#else\n#if($!{tool.getClsNameByFullName($column.type)}==\"Date\")\n    @JsonFormat\n#if($!{column.name}==\"createTime\")\n    @TableField(fill = FieldFill.INSERT)\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#else\n\n#if($!tool.getField(${column.obj.dataType}, \"typeName\") == \"varchar\" )\n#if(${column.obj.isNotNull()})\n    @NotBlank(message = \"$!{column.name}不能为空\", groups = {Insert.class})\n    @NotBlank(message = \"$!{column.name}不能为空\", groups = {Update.class})\n#end\n    @Length(message = \"$!{column.name}长度不能超过${column.obj.dataType.getLength()}个字符\", max = ${column.obj.dataType.getLength()}, groups = {Insert.class, Update.class})\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    public $!{tool.getClsNameByFullName($column.type)} getKey() {\n        return this.$!column.name;\n    }\n    #break\n#end\n\n}"
      }, {
        "name" : "entityRequest.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity/request\", \"Req.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity.request\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\nimport $!{tableInfo.savePackageName}.common.BasicPageCriteria;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\nimport org.hibernate.validator.constraints.Length;\nimport $!{tableInfo.savePackageName}.common.validconfig.Insert;\nimport $!{tableInfo.savePackageName}.common.validconfig.Update;\nimport $!{tableInfo.savePackageName}.common.validconfig.Delete;\n##使用宏定义实现类注释信息\n#tableComment(\"请求实体类\")\n@Data\n@EqualsAndHashCode(callSuper = true)\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class $!{tableInfo.name}Req extends BasicPageCriteria implements Serializable {\n\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n#if($tableInfo.pkColumn[0].name==$!{column.name})\n    @TableId\n    @JsonSerialize(using = ToStringSerializer.class)\n    @NotNull(groups ={Update.class, Delete.class},message = \"请输入主键\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#else\n#if($!{tool.getClsNameByFullName($column.type)}==\"Date\")\n    @JsonFormat\n#if($!{column.name}==\"createTime\")\n    @TableField(fill = FieldFill.INSERT)\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#else\n\n#if($!tool.getField(${column.obj.dataType}, \"typeName\") == \"varchar\" )\n#if(${column.obj.isNotNull()})\n    @NotBlank(message = \"$!{column.name}不能为空\", groups = {Insert.class})\n    @NotBlank(message = \"$!{column.name}不能为空\", groups = {Update.class})\n#end\n    @Length(message = \"$!{column.name}长度不能超过${column.obj.dataType.getLength()}个字符\", max = ${column.obj.dataType.getLength()}, groups = {Insert.class, Update.class})\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n\n    /**\n     * 获取主键值\n     *\n     * @return 主键值\n     */\n    public $!{tool.getClsNameByFullName($column.type)} getKey() {\n        return this.$!column.name;\n    }\n    #break\n#end\n\n\n}"
      }, {
        "name" : "entityResponse.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity/response\", \"Res.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity.response\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport java.io.Serializable;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport com.fasterxml.jackson.annotation.JsonFormat;\n##使用宏定义实现类注释信息\n#tableComment(\"响应实体类\")\n@Data\n@EqualsAndHashCode\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class $!{tableInfo.name}Res implements Serializable {\n\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n#if($tableInfo.pkColumn[0].name==$!{column.name})\n    @TableId\n    @JsonSerialize(using = ToStringSerializer.class)\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#else\n#if($!{tool.getClsNameByFullName($column.type)}==\"Date\")\n    @JsonFormat\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#else\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#end\n#end\n\n}"
      }, {
        "name" : "dao.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.entity.request.$!{tableInfo.name}Req;\nimport $!{tableInfo.savePackageName}.entity.response.$!{tableInfo.name}Res;\nimport org.apache.ibatis.annotations.Mapper;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Mapper\npublic interface $!{tableName} extends BaseMapper<$!{tableInfo.name}>{\n\n    /**\n     * 查询分页数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name})Req 请求实体类\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}Res> selectByPage($!{tableInfo.name}Req $!tool.firstLowerCase($!{tableInfo.name})Req);\n    \n}\n"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.response.$!{tableInfo.name}Res\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\"/>\n#end\n    </resultMap>\n\n    <!--查询分页列表数据-->\n    <select id=\"selectByPage\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        order by create_time desc\n    </select>\n    \n</mapper>\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.common.PageResultBean;\nimport $!{tableInfo.savePackageName}.entity.request.$!{tableInfo.name}Req;\nimport $!{tableInfo.savePackageName}.entity.response.$!{tableInfo.name}Res;\nimport $!{tableInfo.savePackageName}.common.ResultBean;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.Page;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao,$!{tableInfo.name}> {\n    \n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    public ResultBean<$!{tableInfo.name}> queryById($!pk.shortType $!pk.name) {\n        return new ResultBean<>(this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.selectById($!pk.name));\n    }\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}Req 请求实体类\n     * @return 查询结果\n     */\n    public PageResultBean<$!{tableInfo.name}Res> queryByPage($!{tableInfo.name}Req $!{tool.firstLowerCase($tableInfo.name)}Req) {\n        Page<$!{tableInfo.name}Res> res = PageHelper.startPage($!{tool.firstLowerCase($tableInfo.name)}Req.getPageNum(), $!{tool.firstLowerCase($tableInfo.name)}Req.getPageSize());\n        $!{tool.firstLowerCase($tableInfo.name)}Dao.selectByPage($!{tool.firstLowerCase($tableInfo.name)}Req);\n        return new PageResultBean<>(res);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    public ResultBean<$!{tableInfo.name}> insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return new ResultBean<>();\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    public ResultBean<$!{tableInfo.name}> update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.updateById($!tool.firstLowerCase($!{tableInfo.name}));\n        return new ResultBean<>();\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    public ResultBean<$!{tableInfo.name}> deleteById($!pk.shortType $!pk.name) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name);\n        return new ResultBean<>();\n    }\n}"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}